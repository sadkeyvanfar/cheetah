name: Build and Package Release Artifacts

on:
  release:
    types: [created]

jobs:
  build-jar:
    runs-on: ubuntu-latest
    outputs:
      jar-name: ${{ steps.find_jar.outputs.jar_name }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Build with Maven
        run: mvn clean package

      - name: Find final JAR
        id: find_jar
        run: |
          JAR=$(find target -name 'cheetah-*.jar' ! -name 'original-*' | head -n 1)
          echo "jar_name=$(basename $JAR)" >> $GITHUB_OUTPUT
          echo "Found JAR: $JAR"

      - name: Upload JAR as artifact
        uses: actions/upload-artifact@v4
        with:
          name: cheetah-jar
          path: target/${{ steps.find_jar.outputs.jar_name }}

      - name: Upload JAR to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: target/${{ steps.find_jar.outputs.jar_name }}
          asset_name: cheetah-${{ github.event.release.tag_name }}.jar
          asset_content_type: application/java-archive
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  package:
    needs: build-jar
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: cheetah-jar
          path: target/

      - name: Create installer with jpackage
        run: |
          mkdir dist
          jpackage --input target --main-jar ${{ needs.build-jar.outputs.jar-name }} --name Cheetah --main-class gui.Application --type ${{ runner.os == 'Windows' && 'exe' || runner.os == 'macOS' && 'dmg' || 'deb' }} --icon icons/${{ runner.os == 'Windows' && 'cheetah.ico' || runner.os == 'macOS' && 'cheetah.icns' || 'cheetah.png' }} --dest dist --app-version ${{ github.event.release.tag_name }}

      - name: List dist contents for debugging
        run: ls -l dist

      - name: Find installer file
        id: find_installer
        run: |
          if [[ "${{ runner.os }}" == "macOS" ]]; then
            FILE=$(ls dist/Cheetah*.dmg)
          elif [[ "${{ runner.os }}" == "Windows" ]]; then
            FILE=$(ls dist/Cheetah*.exe)
          else
            FILE=$(ls dist/Cheetah*.deb)
          fi
          echo "installer_file=$FILE" >> $GITHUB_OUTPUT

      - name: Upload installer to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ steps.find_installer.outputs.installer_file }}
          asset_name: cheetah-${{ runner.os }}-${{ github.event.release.tag_name }}.${{ runner.os == 'Windows' && 'exe' || runner.os == 'macOS' && 'dmg' || 'deb' }}
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
